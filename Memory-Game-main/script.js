const selectors = {
    boardContainer: document.querySelector('.board-container'),
    board: document.querySelector('.board'),
    moves: document.querySelector('.moves'),
    timer: document.querySelector('.timer'),
    start: document.querySelector('button'),
    win: document.querySelector('.win')
}

const state = {
    gameStarted: false,
    flippedCards: 0,
    totalFlips: 0,
    totalTime: 0,
    loop: null
}

const shuffle = array => {
    const clonedArray = [...array]

    for (let i = clonedArray.length - 1; i > 0; i--) {
        const randomIndex = Math.floor(Math.random() * (i + 1))
        const original = clonedArray[i]

        clonedArray[i] = clonedArray[randomIndex]
        clonedArray[randomIndex] = original
    }

    return clonedArray
}

const pickRandom = (array, items) => {
    const clonedArray = [...array]
    const randomPicks = []

    for (let i = 0; i < items; i++) {
        const randomIndex = Math.floor(Math.random() * clonedArray.length)
        
        randomPicks.push(clonedArray[randomIndex])
        clonedArray.splice(randomIndex, 1)
    }

    return randomPicks
}

const generateGame = () => {
    const dimensions = selectors.board.getAttribute('data-dimension');

    if (dimensions % 2 !== 0) {
        throw new Error("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–æ—Å–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º —á–∏—Å–ª–æ–º.");
    }

    const emojis = ['ü•î', 'üçí', 'ü•ë', 'üåΩ', 'ü•ï', 'üçá', 'üçâ', 'üçå', 'ü•≠', 'üçç'];
    const picks = pickRandom(emojis, (dimensions * dimensions) / 2);
    const items = shuffle([...picks, ...picks]);

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–æ—Å–∫—É
    selectors.board.innerHTML = '';
    // –ó–∞–¥–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∏–¥–∞ –¥–ª—è –¥–æ—Å–∫–∏
    selectors.board.style.gridTemplateColumns = `repeat(${dimensions}, auto)`;

    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    items.forEach(item => {
        const cardElement = document.createElement('div');
        cardElement.classList.add('card');
        cardElement.innerHTML = `
            <div class="card-front"></div>
            <div class="card-back">${item}</div>
        `;
        selectors.board.appendChild(cardElement);
    });
};

const startGame = () => {
    clearInterval(state.loop); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–±–µ–∂–¥–µ–Ω–∏—è, —á—Ç–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –æ—á–∏—â–µ–Ω

    state.gameStarted = true;
    selectors.start.classList.add('disabled');

    state.loop = setInterval(() => {
        state.totalTime++;
        selectors.moves.innerText = `–•–æ–¥–æ–≤: ${state.totalFlips}`;
        selectors.timer.innerText = `–í—Ä–µ–º—è: ${state.totalTime} —Å–µ–∫`;
    }, 1000);
}

const flipBackCards = () => {
    document.querySelectorAll('.card:not(.matched)').forEach(card => {
        card.classList.remove('flipped')
    })

    state.flippedCards = 0
}

const flipCard = card => {
    state.flippedCards++
    state.totalFlips++

    if (!state.gameStarted) {
        startGame()
    }

    if (state.flippedCards <= 2) {
        card.classList.add('flipped')
    }

    if (state.flippedCards === 2) {
        const flippedCards = document.querySelectorAll('.flipped:not(.matched)')

        if (flippedCards[0].innerText === flippedCards[1].innerText) {
            flippedCards[0].classList.add('matched')
            flippedCards[1].classList.add('matched')
        }

        setTimeout(() => {
            flipBackCards()
        }, 500)
    }
    if (!document.querySelectorAll('.card:not(.flipped)').length) {
        setTimeout(() => {
            selectors.boardContainer.classList.add('flipped')
            selectors.win.innerHTML = `
                <span class="win-text">
                    –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!<br />
                    –∏—Å–ø–æ–ª—å–∑—É—è <span class="highlight">${state.totalFlips}</span> —Ö–æ–¥–∞<br />
                    –∑–∞ <span class="highlight">${state.totalTime}</span> —Å–µ–∫—É–Ω–¥
                </span>
            `

            clearInterval(state.loop)
        }, 1000)
    }
}

const attachEventListeners = () => {
    document.addEventListener('click', event => {
        const eventTarget = event.target
        const eventParent = eventTarget.parentElement

        if (eventTarget.className.includes('card') && !eventParent.className.includes('flipped')) {
            flipCard(eventParent)
        } else if (eventTarget.nodeName === 'BUTTON' && !eventTarget.className.includes('disabled')) {
            startGame()
        }
    })
}

generateGame()
attachEventListeners()
document.addEventListener('click', function(event) {
    if (event.target.id === 'restart') {
        resetGame();
    }
});

function resetGame() {
    clearInterval(state.loop); // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

    state.gameStarted = false;
    state.flippedCards = 0;
    state.totalFlips = 0;
    state.totalTime = 0;

    selectors.moves.innerText = `–•–æ–¥–æ–≤: ${state.totalFlips}`;
    selectors.timer.innerText = `–í—Ä–µ–º—è: ${state.totalTime} —Å–µ–∫`;
    selectors.start.classList.remove('disabled');
    selectors.boardContainer.classList.remove('flipped');

    selectors.board.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞ –¥–æ—Å–∫–∏ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π

    generateGame(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –¥–æ—Å–∫–∏
}
